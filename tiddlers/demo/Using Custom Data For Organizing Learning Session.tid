title: Using Custom Data For Organizing Learning Session
type: text/vnd.tiddlywiki

The SRS system provides a way to organize learning sessions using custom data generated by the user. Using this approach, you can create learning sessions based on any data you are interested in. You can mix data from different sources and different types in one learning session. For example, you can create a learning session that asks questions about countries, peoples, capitals, cities, historical events, etc.

First of all, you need to create a special tiddler that contains a JavaScript macro for generate a list of questions in special format. The SRS plugin than uses this macro to create the learning session. You can read more about using JavaScript marcos in TiddlyWiki [[here|https://groktiddlywiki.com/read/#JavaScript%20Macros]].

Your macro can be organized in the following way:

* create a tiddler with type `application/javascript`
* add a field `module-type` and set its value to `macro`
* set the content of the tiddler like the following code:

```
/*\
title: YOUR_TIDDLER_TITLE
type: application/javascript
module-type: macro

Produces custom data for SRS learning session
\*/
(function(){
"use strict";

exports.name = "YOUR_MACRO_NAME";
exports.params = [
  {name: "wiki"},
  {name: "direction"},
  {name: "limit"},
  {name: "time"}
];
exports.run = function(wiki, direction, limit, time) {
    // put your code here
    return [
        {
            type: FIRST_QUESTION_TYPE,
            src: FIRST_QUESTION_SOURCE_TITLE,
            direction: FIRST_QUESTION_DIRECTION
        },
        {
            type: SECOND_QUESTION_TYPE,
            src: SECOND_QUESTION_SOURCE_TITLE,
            direction: SECOND_QUESTION_DIRECTION
        },
        // and so on
    ];
};

})();
```
* save the tiddler and the wiki
* after reloading your wiki will recognize the macro and you will be able to use it in the SRS

!!! Macro structure

Let discuss the code above. The `exports.name` field contains the name of the macro. You can use any name you want that is legal in TiddlyWiki. Remember this name because you will use it in the SRS template.

The `exports.params` field contains the list of parameters that the macro accepts. The `exports.run` function is the main function of the macro. It accepts four parameters: `wiki`, `direction`, `limit` and `time`. These parameters will be filled with actual values by the SRS system. 

!!! Macro parameters

The `wiki` parameter is the reference to the wiki object. You can use it to get your tiddlers from the wiki. Actually it is not a real wiki object. It's rather a proxy object that provide some methods to get information from the real wiki. You cannot change the real wiki through this object. The `wiki` object has following methods and constants:

* `getTitlesWithTag(tag)` - returns a list of the tiddler titles that are tagged with a given tag
* `filterTiddlers(filterString)` - returns a list of the tiddler titles which are filtered accordingly to the filter string. You can read about TiddlyWiki filters [[here|https://tiddlywiki.com/#Filters]] and [[here|https://groktiddlywiki.com/read/#Filters]].
* `allTitles()` - returns a list of all tiddler titles
* `allShadowTitles()` - returns a list of all shadow tiddler titles
* `tiddlerExists(title)` - returns `true` if the tiddler with the given title exists (excludes shadow tiddlers)
* `isShadowTiddler(title)` - returns `true` if the tiddler with the given title is a shadow tiddler
* `getTiddler(title)` - returns the tiddler object by its title
* `getSrsData(titleOrTiddler)` - returns the SRS related data from the tiddler
* `SRS_BASE_TIME` - the most minimal time value in the SRS system

The `direction` parameter is the direction of questions selected by the user. It can be one of the following values:

* `forward` - the user wants to learn the information only in forward direction,
* `backward` - the user wants to learn the information only in backward direction,
* `both` - the user wants to learn the information in both directions.

The `limit` parameter is the maximum number of tiddlers that should appear in the learning session. The SRS passes this value directly from the `limit` attribute of the SRS template.

The `time` parameter is the time when a learning session is filled with new data. You will use this parameter to check if tiddlers should be included in the learning session or not.

!!! Macro return value

The function should return an __array of objects of special format__. Each object in the array should contain the following fields: `type`, `src`, and `direction`.

The `type` field contains the type of the question. Ususally it is a tag that marks tiddlers that desribes information of same kind. For example, you can use the tag `Country` for all tiddlers that describe countries.

The `src` field contains the title of the tiddler that contains the information for a current question. The SRS system will use the content of the tiddler to create the question card.

The `direction` field contains the direction of the question. The direction can be one of the following values: '''forward''' or '''backward'''.

Pay your attention that all three attributes are required. You will get an error if you miss one of them.

!!! Using the macro

After you created the macro, you can use it in the SRS template. You can use the [[provided template|SrsLearningSessionDynamicTemplate]] to create a learning session like this:

```
<$transclude
 $tiddler="$:/plugins/midorum/srs/templates/SrsLearningSessionDynamicTemplate"
 listProvider="YOUR_MACRO_NAME"
/>
```
Note that we use the `listProvider` attribute to specify the name of the macro. As you guess this name should be equal to the `exports.name` attribute in your macro.

This template contains a lot of attributes that you can use to customize the learning session.

You can see a simple example of a user defined macro for gererating learning session in [[SessionDataProducer|SessionDataProducerExample]]. It has a quite primitive logic that mixes in the same session tiddlers that are tagged with `Country` or `Ocean` tag. You can use it as a starting point for your own macro. To see this example in action create a tiddler with the following content:

```
<$transclude
 $tiddler="$:/plugins/midorum/srs/templates/SrsLearningSessionDynamicTemplate"
 listProvider="SessionDataProducer"
/>
```

If you want to create a lerning session by yourself, you can use the following message `tm-srs-create-session` like this:

```
<$action-sendmessage
 $message="tm-srs-create-session"
 ref="TITLE_OF_THE_SESSION_TIDDLER"
 limit=100
 listProvider="TITLE_OF_YOUR_MACRO"
/>
```
