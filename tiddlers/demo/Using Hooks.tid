title: Using Hooks
type: text/vnd.tiddlywiki

The SRS system provides a hook mechanism that allows you to add easily you own logic to learning session without the need to define your own template.

You can define following hooks:

* ''preCreateHook'' - invoked before creating a new learning session
* ''postCreateHook'' - invoked after creating a new learning session
* ''preDestroyHook'' - invoked before deleting the learning session
* ''postDestroyHook'' - invoked after deleting the learning session
* ''preAnswerHook'' - invoked before acceping the user's answer
* ''postAnswerHook'' - invoked after accepting the user's answer

All hooks can be defined as a JavaScript macro in the following way:

* create a tiddler with type `application/javascript`
* add a field `module-type` and set its value to `macro`
* set the content of the tiddler like the following code:

```
/*\
title: YOUR_TIDDLER_TITLE
type: application/javascript
module-type: macro

A brief macro desription
\*/
(function(){
"use strict";

exports.name = "YOUR_MACRO_NAME";
exports.params = [
  {name: "wiki", description: "Object that allows to retrieve data from the wiki"},
  {name: "params", description: "An object that contains some useful information about the learning session"}
];
exports.run = function(wiki, params) {
    // put your code here
    return true; // this is neccesary for preCreateHook, preDestroyHook and preAnswerHook
};

})();
```
* save the tiddler and the wiki
* after reloading your wiki will recognize the macro and you will be able to use it in the SRS

You can read more about using JavaScript marcos in TiddlyWiki [[here|https://groktiddlywiki.com/read/#JavaScript%20Macros]].

!!! Macro parameters

The `wiki` parameter is the reference to the wiki object. The structure of this object is described in details [[here|Using Custom Data For Organizing Learning Session]]

The `params` parameter is the object that contains some information about the learning session. Its content depends on a particular hook and is described below.

!!! Macro return value

Some hooks should return a result. It depends on a particular hook and is described below.

!! ''preCreateHook''

This macro will be invoked by the SRS system before creating a new learning session. You can use this hook for debug purpose or some validation. You can also prevent creation a new session if you need.

To make it work you should pass this macro title to the `tm-srs-create-session` message in the `preCreateHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `preCreateHook` attribute.

The SRS system expects that the ''preCreateHook'' returns a boolean result. It must return `true` in order to proceed session creation or `false` to prevent (abort) session creation.

The SRS system passes to the ''preCreateHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-create-session` message

!! ''postCreateHook''

This macro will be invoked by the SRS system immediatelly after a new learning session has been created. You can use this hook for debug purpose or some validation.

To make it work you should pass this macro title to the `tm-srs-create-session` message in the `postCreateHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `postCreateHook` attribute.

The SRS system does not expect that the ''postCreateHook'' returns any result.

The SRS system passes to the ''postCreateHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-create-session` message
* ''next'' - contains information about the current asked question
* ''time'' - the session creation time

!! ''preDestroyHook''

This macro will be invoked by the SRS system before deleting the current learning session. You can use this hook for debug purpose or some validation. You can also prevent the session to be deleted.

To make it work you should pass this macro title to the `tm-srs-delete-session` message in the `preDestroyHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `preDestroyHook` attribute.

The SRS system expects that the ''preDestroyHook'' returns a boolean result. It must return `true` in order to proceed session deletion or `false` to prevent (abort) session deletion.

The SRS system passes to the ''preDestroyHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-delete-session` message

!! ''postDestroyHook''

This macro will be invoked by the SRS system immediatelly after the current learning session has been deleted. You can use this hook for debug purpose or some validation.

To make it work you should pass this macro title to the `tm-srs-delete-session` message in the `postDestroyHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `postDestroyHook` attribute.

The SRS system does not expect that the ''postDestroyHook'' returns any result.

The SRS system passes to the ''postDestroyHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-delete-session` message

!! ''preAnswerHook''

This macro will be invoked by the SRS system before accepting an answer from the user. You can use this hook for debug purpose or some validation. You can also prevent accepting the answer at all.

To make it work you should pass this macro title to the `tm-srs-commit-answer` message in the `preAnswerHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `preAnswerHook` attribute.

The SRS system expects that the ''preAnswerHook'' returns a boolean result. It must return `true` in order to proceed accepting the answer or `false` to prevent (abort) accepting the answer.

The SRS system passes to the ''preAnswerHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-commit-answer` message
* ''asked'' - contains information about the question that the user has answered
* ''relatedTiddlers'' - contains the list of tiddlers which are related with question (see [[Commiting Answer for Associated Tiddlers]] for more information)
* ''time'' - the answer acceping time

!! ''postAnswerHook''

This macro will be invoked by the SRS system immediatelly after accepting an answer from the user. You can use this hook for debug purpose or some validation.

To make it work you should pass this macro title to the `tm-srs-commit-answer` message in the `postAnswerHook` attribute. If you are using the predefined [[leranig session template|SrsLearningSessionDynamicTemplate]] you can pass the macro title to the template via its `postAnswerHook` attribute.

The SRS system does not expect that the ''postAnswerHook'' returns any result.

The SRS system passes to the ''postAnswerHook'' macro the following data (in `params` parameter):

* ''invokeParams'' - contains parameters which were passed to the `tm-srs-commit-answer` message
* ''asked'' - contains information about the question that the user has answered
* ''next'' - contains information about the next asked question
* ''relatedTiddlers'' - contains the list of tiddlers which are related with question (see [[Commiting Answer for Associated Tiddlers]] for more information)
* ''time'' - the answer acceping time